{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\n\nvar CryptoJs = require(\"crypto-js\");\n\nconst NEW_CHAT_MESSAGE_EVENT = \"newChatMessage\";\nconst SOCKET_SERVER_URL = \"http://localhost:4000\";\n\nconst useChat = (roomId, userName) => {\n  _s();\n\n  const [messages, setMessages] = useState([]);\n  const socketRef = useRef();\n  useEffect(() => {\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: {\n        roomId\n      }\n    });\n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, message => {\n      var secret = CryptoJs.SHA256(roomId);\n      var bytes = CryptoJs.AES.decrypt(message, secret.toString().substring(0, 18));\n      var decryptedData = JSON.parse(bytes.toString(CryptoJs.enc.Utf8));\n      const incomingMessage = { ...decryptedData,\n        ownedByCurrentUser: decryptedData.senderId === socketRef.current.id\n      };\n      setMessages(messages => [...messages, incomingMessage]);\n    });\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId]);\n\n  const sendMessage = messageBody => {\n    var dataToSend = {\n      body: messageBody,\n      senderId: socketRef.current.id,\n      username: userName\n    };\n    var secret = CryptoJs.SHA256(roomId);\n    var cipherText = CryptoJs.AES.encrypt(JSON.stringify(dataToSend), secret.toString().substring(0, 18)).toString();\n    socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, cipherText);\n  };\n\n  return {\n    messages,\n    sendMessage\n  };\n};\n\n_s(useChat, \"rJUxOyV7d92WYkbiDZQ/Q3CnO+M=\");\n\nexport default useChat;","map":{"version":3,"sources":["C:/Users/Ionut/Desktop/project/pablo/client/src/useChat.js"],"names":["useEffect","useRef","useState","socketIOClient","CryptoJs","require","NEW_CHAT_MESSAGE_EVENT","SOCKET_SERVER_URL","useChat","roomId","userName","messages","setMessages","socketRef","current","query","on","message","secret","SHA256","bytes","AES","decrypt","toString","substring","decryptedData","JSON","parse","enc","Utf8","incomingMessage","ownedByCurrentUser","senderId","id","disconnect","sendMessage","messageBody","dataToSend","body","username","cipherText","encrypt","stringify","emit"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AACA,IAAIC,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AAEA,MAAMC,sBAAsB,GAAG,gBAA/B;AACA,MAAMC,iBAAiB,GAAG,uBAA1B;;AAEA,MAAMC,OAAO,GAAG,CAACC,MAAD,EAASC,QAAT,KAAsB;AAAA;;AACpC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAMW,SAAS,GAAGZ,MAAM,EAAxB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,SAAS,CAACC,OAAV,GAAoBX,cAAc,CAACI,iBAAD,EAAoB;AACpDQ,MAAAA,KAAK,EAAE;AAAEN,QAAAA;AAAF;AAD6C,KAApB,CAAlC;AAIAI,IAAAA,SAAS,CAACC,OAAV,CAAkBE,EAAlB,CAAqBV,sBAArB,EAA8CW,OAAD,IAAa;AAExD,UAAIC,MAAM,GAAGd,QAAQ,CAACe,MAAT,CAAgBV,MAAhB,CAAb;AACA,UAAIW,KAAK,GAAGhB,QAAQ,CAACiB,GAAT,CAAaC,OAAb,CAAqBL,OAArB,EAA8BC,MAAM,CAACK,QAAP,GAAkBC,SAAlB,CAA4B,CAA5B,EAA8B,EAA9B,CAA9B,CAAZ;AACA,UAAIC,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWP,KAAK,CAACG,QAAN,CAAenB,QAAQ,CAACwB,GAAT,CAAaC,IAA5B,CAAX,CAApB;AAEA,YAAMC,eAAe,GAAG,EACtB,GAAGL,aADmB;AAEtBM,QAAAA,kBAAkB,EAAEN,aAAa,CAACO,QAAd,KAA2BnB,SAAS,CAACC,OAAV,CAAkBmB;AAF3C,OAAxB;AAIArB,MAAAA,WAAW,CAAED,QAAD,IAAc,CAAC,GAAGA,QAAJ,EAAcmB,eAAd,CAAf,CAAX;AACD,KAXD;AAaA,WAAO,MAAM;AACXjB,MAAAA,SAAS,CAACC,OAAV,CAAkBoB,UAAlB;AACD,KAFD;AAGD,GArBQ,EAqBN,CAACzB,MAAD,CArBM,CAAT;;AAuBA,QAAM0B,WAAW,GAAIC,WAAD,IAAiB;AAEnC,QAAIC,UAAU,GAAG;AACfC,MAAAA,IAAI,EAAEF,WADS;AAEfJ,MAAAA,QAAQ,EAAEnB,SAAS,CAACC,OAAV,CAAkBmB,EAFb;AAGfM,MAAAA,QAAQ,EAAE7B;AAHK,KAAjB;AAKA,QAAIQ,MAAM,GAAGd,QAAQ,CAACe,MAAT,CAAgBV,MAAhB,CAAb;AAEA,QAAI+B,UAAU,GAAGpC,QAAQ,CAACiB,GAAT,CAAaoB,OAAb,CAAqBf,IAAI,CAACgB,SAAL,CAAeL,UAAf,CAArB,EAAgDnB,MAAM,CAACK,QAAP,GAAkBC,SAAlB,CAA4B,CAA5B,EAA8B,EAA9B,CAAhD,EAAmFD,QAAnF,EAAjB;AACAV,IAAAA,SAAS,CAACC,OAAV,CAAkB6B,IAAlB,CAAuBrC,sBAAvB,EAA+CkC,UAA/C;AACD,GAXD;;AAaA,SAAO;AAAE7B,IAAAA,QAAF;AAAYwB,IAAAA;AAAZ,GAAP;AACD,CAzCD;;GAAM3B,O;;AA2CN,eAAeA,OAAf","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\nimport socketIOClient from \"socket.io-client\";\r\nvar CryptoJs = require(\"crypto-js\");\r\n\r\nconst NEW_CHAT_MESSAGE_EVENT = \"newChatMessage\";\r\nconst SOCKET_SERVER_URL = \"http://localhost:4000\";\r\n\r\nconst useChat = (roomId, userName) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const socketRef = useRef();\r\n\r\n  useEffect(() => {\r\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\r\n      query: { roomId },\r\n    });\r\n\r\n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, (message) => {\r\n\r\n      var secret = CryptoJs.SHA256(roomId);\r\n      var bytes = CryptoJs.AES.decrypt(message, secret.toString().substring(0,18));\r\n      var decryptedData = JSON.parse(bytes.toString(CryptoJs.enc.Utf8));\r\n\r\n      const incomingMessage = {\r\n        ...decryptedData,\r\n        ownedByCurrentUser: decryptedData.senderId === socketRef.current.id,\r\n      };\r\n      setMessages((messages) => [...messages, incomingMessage]);\r\n    });\r\n\r\n    return () => {\r\n      socketRef.current.disconnect();\r\n    };\r\n  }, [roomId]);\r\n\r\n  const sendMessage = (messageBody) => {\r\n\r\n    var dataToSend = {\r\n      body: messageBody,\r\n      senderId: socketRef.current.id,\r\n      username: userName,\r\n    }\r\n    var secret = CryptoJs.SHA256(roomId);\r\n\r\n    var cipherText = CryptoJs.AES.encrypt(JSON.stringify(dataToSend),secret.toString().substring(0,18)).toString();\r\n    socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, cipherText);\r\n  };\r\n\r\n  return { messages, sendMessage };\r\n};\r\n\r\nexport default useChat;"]},"metadata":{},"sourceType":"module"}